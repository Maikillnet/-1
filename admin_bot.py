
import os
import logging
import asyncio
from telegram import Update, Bot
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
)

TOKEN = "8053119583:AAEk2_DTDRqta2_gPuZ83DZkcebwyZ1nKPM"
CHANNEL_ID = "@politbyrg"
BOT_PASSWORD = "Mailmail20020921"
AUTHORIZED_USERS = set()
AUTHORIZED_FILE = "authorized_users.txt"
BANNED_WORDS = [
    "—Ö—É–π", "–ø–∏–∑–¥–∞", "–µ–±–∞—Ç—å", "–±–ª—è–¥—å", "–º—Ä–∞–∑—å", "—Å—É–∫–∞", "–≥–∞–Ω–¥–æ–Ω", "–¥–∞—É–Ω", "—á–º–æ", "—É–µ–±–∏—â–µ",
    "–∏–¥–∏–æ—Ç", "—Ç–≤–∞—Ä—å", "—Å–≤–æ–ª–æ—á—å", "–∂–æ–ø–∞", "–≥–æ–≤–Ω–æ", "–º—É–¥–∞–∫", "–ø–µ–¥–∏–∫", "–≥–µ–π", "–¥–æ–ª–±–∞—ë–±", "—à–∞–ª–∞–≤–∞",
    "–ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞", "–∞—É—Ç–∏—Å—Ç", "–¥–µ–±–∏–ª", "–∫—Ä–µ—Ç–∏–Ω", "—É—Ä–æ–¥", "–Ω–µ–≥—Ä", "–Ω–∞—Ü–∏—Å—Ç", "—Ä–∞—Å–∏—Å—Ç", "–µ–±–ª–∞–Ω",
    "–ø–µ—Ç—É—Ö", "–ª–æ—Ö", "–∏–∑–≤—Ä–∞—â–µ–Ω–µ—Ü", "–æ–±–æ—Å—Å—ã—à—å—Å—è", "–¥—Ä—è–Ω—å", "—Å—Å–∞–Ω–∏–Ω–∞", "–∫—É—Ä–≤–∞", "—à–ª—é—Ö–∞", "–µ–±–∞–Ω–∞—Ç", "–≤—ã–±–ª—è–¥–æ–∫"
]

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
application = ApplicationBuilder().token(TOKEN).build()

def load_authorized():
    if os.path.exists(AUTHORIZED_FILE):
        with open(AUTHORIZED_FILE, "r") as f:
            for line in f:
                AUTHORIZED_USERS.add(int(line.strip()))

def save_authorized():
    with open(AUTHORIZED_FILE, "w") as f:
        for uid in AUTHORIZED_USERS:
            f.write(str(uid) + "\n")

load_authorized()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid in AUTHORIZED_USERS:
        await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        return

    if context.args and context.args[0] == BOT_PASSWORD:
        AUTHORIZED_USERS.add(uid)
        save_authorized()
        await update.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
    else:
        await update.message.reply_text("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: /start <–ø–∞—Ä–æ–ª—å>")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in AUTHORIZED_USERS: return
    await update.message.reply_text(
        "/start <–ø–∞—Ä–æ–ª—å> ‚Äî –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/post <–º–∏–Ω—É—Ç—ã> <—Ç–µ–∫—Å—Ç> ‚Äî –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ—Å—Ç\n"
        "/broadcast <—Ç–µ–∫—Å—Ç> ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞\n"
        "/exit ‚Äî –≤—ã–π—Ç–∏\n"
        "/stats ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n"
        "/channelstats ‚Äî –∫–∞–Ω–∞–ª\n"
        "/lastposts ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã"
    )

async def post_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in AUTHORIZED_USERS: return
    msg = update.message
    caption = msg.caption if msg.caption else msg.text
    if not caption: return await msg.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /post <–º–∏–Ω—É—Ç—ã> <—Ç–µ–∫—Å—Ç>")
    try:
        minutes, text = int(caption.split()[1]), " ".join(caption.split()[2:])
    except:
        return await msg.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /post <–º–∏–Ω—É—Ç—ã> <—Ç–µ–∫—Å—Ç>")
    await msg.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç.")
    await asyncio.sleep(minutes * 60)
    if msg.photo:
        await bot.send_photo(CHANNEL_ID, msg.photo[-1].file_id, caption=text)
    elif msg.video:
        await bot.send_video(CHANNEL_ID, msg.video.file_id, caption=text)
    else:
        await bot.send_message(CHANNEL_ID, text)

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in AUTHORIZED_USERS: return
    text = " ".join(context.args)
    if not text: return await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
    for uid in AUTHORIZED_USERS:
        try:
            await context.bot.send_message(uid, f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ:\n\n{text}")
        except: continue
    await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

async def exit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    AUTHORIZED_USERS.discard(uid)
    save_authorized()
    await update.message.reply_text("üö™ –í—ã –≤—ã—à–ª–∏.")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in AUTHORIZED_USERS: return
    await update.message.reply_text(f"üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(AUTHORIZED_USERS)}")

async def channelstats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in AUTHORIZED_USERS: return
    chat = await bot.get_chat(CHANNEL_ID)
    members = await bot.get_chat_member_count(CHANNEL_ID)
    admins = await bot.get_chat_administrators(CHANNEL_ID)
    await update.message.reply_text(
        f"üìä –ö–∞–Ω–∞–ª: {chat.title}\nüë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {members}\nüõ°Ô∏è –ê–¥–º–∏–Ω–æ–≤: {len(admins)}\nüìÉ –û–ø–∏—Å–∞–Ω–∏–µ: {chat.description or '-'}"
    )

async def lastposts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in AUTHORIZED_USERS: return
    await update.message.reply_text("‚ö†Ô∏è Telegram Bot API –Ω–µ –¥–∞—ë—Ç –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.")

async def moderation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message: return
    text = update.message.text.lower()
    if any(bad in text for bad in BANNED_WORDS):
        try:
            await update.message.delete()
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üîá –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞."
            )
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_command))
application.add_handler(CommandHandler("post", post_command))
application.add_handler(CommandHandler("broadcast", broadcast))
application.add_handler(CommandHandler("exit", exit_command))
application.add_handler(CommandHandler("stats", stats_command))
application.add_handler(CommandHandler("channelstats", channelstats_command))
application.add_handler(CommandHandler("lastposts", lastposts_command))
application.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, moderation))

if __name__ == "__main__":
    print("‚úÖ –ê–¥–º–∏–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    application.run_polling()
